CCS PCM C Compiler, Version 5.074, 32906               10-มี.ค.-21 01:52

               Filename:   C:\Users\Apathy\Desktop\Lab Embbed\BPM.lst

               ROM used:   695 words (8%)
                           Largest free fragment is 2048
               RAM used:   39 (11%) at main() level
                           48 (13%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   22F
0003:  NOP
.................... //!#include <16F886.h> 
.................... //!#include <stdbool.h> 
.................... //!#device ADC=10 *=16   
.................... //! 
.................... //!#FUSES NOWDT                    //No Watch Dog Timer 
.................... //!#FUSES PUT                      //Power Up Timer 
.................... //!#FUSES NOMCLR                   //Master Clear pin not enabled 
.................... //!#FUSES NOPROTECT                //Code not protected from reading 
.................... //!#FUSES NOCPD                    //No EE protection 
.................... //!#FUSES BROWNOUT                 //Brownout reset 
.................... //!#FUSES IESO                     //Internal External Switch Over mode enabled 
.................... //!#FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... //!#FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... //!#FUSES NODEBUG                  //No Debug mode for ICD 
.................... //!#FUSES NOWRT                    //Program memory not write protected 
.................... //!#FUSES BORV40                   //Brownout reset at 4.0V 
.................... //!#FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... //!#FUSES INTRC_IO  
.................... //! 
.................... //!#use delay(clock=8M) 
.................... //! 
.................... //! 
.................... //!#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... //!volatile int rate[10]; // array to hold last ten IBI values 
.................... //!volatile unsigned long sampleCounter = 0; // used to determine pulse timing 
.................... //!volatile unsigned long lastBeatTime = 0; // used to find IBI 
.................... //!volatile int P = 512; // used to find peak in pulse wave, seeded 
.................... //!volatile int T = 512; // used to find trough in pulse wave, seeded 
.................... //!volatile int thresh = 512; // used to find instant moment of heart beat, seeded 
.................... //!volatile int amp = 0; // used to hold amplitude of pulse waveform, seeded 
.................... //!volatile bool firstBeat = true; // used to seed rate array so we startup with reasonable BPM 
.................... //!volatile bool secondBeat = false; // used to seed rate array so we startup with reasonable BPM 
.................... //! 
.................... //!volatile int BPM; // int that holds raw Analog in 0. updated every 2mS 
.................... //!volatile int16 Signal; // holds the incoming raw data 
.................... //!volatile int IBI = 600; // int that holds the time interval between beats! Must be seeded! 
.................... //!volatile bool Pulse = false; // "True" when User's live heartbeat is detected. "False" when not a "live beat". 
.................... //!volatile bool QS = false; // becomes true when finds a beat. 
.................... //! 
.................... //!void calculate_heart_beat(unsigned int16 adc_value){ 
.................... //! 
.................... //!   Signal = adc_value; 
.................... //!   sampleCounter += 2; 
.................... //!   int16 N = sampleCounter - lastBeatTime; 
.................... //!    
.................... //!   //find trough of the pulse wave 
.................... //!   if (Signal < thresh && N > (IBI / 5)*3) { // avoid dichrotic noise by waiting 3/5 of last IBI 
.................... //!        if (Signal < T) { // T is the trough 
.................... //!            T = Signal; // keep track of lowest point in pulse wave 
.................... //!        } 
.................... //!    } 
.................... //!     
.................... //!    //find peak of the pulse wave 
.................... //!    if (Signal > thresh && Signal > P) { // thresh condition helps avoid noise 
.................... //!        P = Signal; // P is the peak 
.................... //!    } // keep track of highest point in pulse wave 
.................... //!     
.................... //!    if(N > 250){ 
.................... //!      if ((Signal > thresh) && (Pulse == false) && (N > (IBI / 5)*3)){ 
.................... //!         Pulse = true; // set the Pulse flag when we think there is a pulse 
.................... //!         IBI = sampleCounter - lastBeatTime; // measure time between beats in mS 
.................... //!         lastBeatTime = sampleCounter; // keep track of time for next pulse 
.................... //!          
.................... //!         if (secondBeat) { // if this is the second beat, if secondBeat == TRUE 
.................... //!              secondBeat = false; // clear secondBeat flag 
.................... //!              int i; 
.................... //!              for (i = 0; i <= 9; i++) { // seed the running total to get a realisitic BPM at startup 
.................... //!                 rate[i] = IBI; 
.................... //!              } 
.................... //!         } 
.................... //! 
.................... //!         if (firstBeat) { // if it's the first time we found a beat, if firstBeat == TRUE 
.................... //!              firstBeat = false; // clear firstBeat flag 
.................... //!              secondBeat = true; // set the second beat flag 
.................... //!              //pulse_tmr_handle = bsp_harmony_start_tmr_cb_periodic(PULSE_CHECK_TIME_INTERVAL, 0, pulse_read_cb); // enable interrupts again 
.................... //!              return; // IBI value is unreliable so discard it 
.................... //!         } 
.................... //!          
.................... //!         unsigned int16 runningTotal = 0; // clear the runningTotal variable 
.................... //!         int i; 
.................... //!         for (i = 0; i <= 8; i++) { // shift data in the rate array 
.................... //!             rate[i] = rate[i + 1]; // and drop the oldest IBI value 
.................... //!             runningTotal += rate[i]; // add up the 9 oldest IBI values 
.................... //!         } 
.................... //! 
.................... //!         rate[9] = IBI; // add the latest IBI to the rate array 
.................... //!         runningTotal += rate[9]; // add the latest IBI to runningTotal 
.................... //!         runningTotal /= 10; // average the last 10 IBI values 
.................... //!         BPM = 60000 / runningTotal; // how many beats can fit into a minute? that's BPM! 
.................... //!         QS = true; // set Quantified Self flag 
.................... //!      } 
.................... //!    } 
.................... //!     
.................... //!     
.................... //!    if (Signal < thresh && Pulse == true) { // when the values are going down, the beat is over 
.................... //!        Pulse = false; // reset the Pulse flag so we can do it again 
.................... //!        amp = P - T; // get amplitude of the pulse wave 
.................... //!        thresh = amp / 2 + T; // set thresh at 50% of the amplitude 
.................... //!        P = thresh; // reset these for next time 
.................... //!        T = thresh; 
.................... //!    } 
.................... //! 
.................... //!    if (N > 2500) { // if 2.5 seconds go by without a beat 
.................... //!        thresh = 512; // set thresh default 
.................... //!        P = 512; // set P default 
.................... //!        T = 512; // set T default 
.................... //!        lastBeatTime = sampleCounter; // bring the lastBeatTime up to date 
.................... //!        firstBeat = true; // set these to avoid noise 
.................... //!        secondBeat = false; // when we get the heartbeat back 
.................... //!    } 
.................... //!     
.................... //!} 
.................... //! 
.................... //! 
.................... //!void main() 
.................... //!{    
.................... //!   setup_adc_ports(sAN0); // setup PIN A0 as analog input  
.................... //!   setup_adc( ADC_CLOCK_INTERNAL );  
.................... //!   set_adc_channel(0); // set the ADC chaneel to read  
.................... //!   delay_us(100); 
.................... //!    
.................... //!   while(1) { 
.................... //!      calculate_heart_beat(read_adc()); 
.................... //!      printf("sensor = %lu\r\u",read_adc()); 
.................... //!      output_toggle(PIN_B6); 
.................... //!      if(QS == true){ 
.................... //!      printf("BPM = %u\r\n", BPM); 
.................... //!       
.................... //!      } 
.................... //!      delay_ms(500); 
.................... //!   } 
.................... //! 
.................... //!} 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  DATA 42,28
0005:  DATA 4D,10
0006:  DATA 2D,10
0007:  DATA A5,3A
0008:  DATA 0D,05
0009:  DATA 00,00
000A:  CLRF   78
000B:  CLRF   79
000C:  CLRF   77
000D:  CLRF   7A
000E:  MOVF   47,W
000F:  BTFSS  03.2
0010:  GOTO   014
0011:  MOVF   46,W
0012:  BTFSC  03.2
0013:  GOTO   02E
0014:  MOVLW  10
0015:  MOVWF  48
0016:  BCF    03.0
0017:  RLF    44,F
0018:  RLF    45,F
0019:  RLF    77,F
001A:  RLF    7A,F
001B:  MOVF   47,W
001C:  SUBWF  7A,W
001D:  BTFSS  03.2
001E:  GOTO   021
001F:  MOVF   46,W
0020:  SUBWF  77,W
0021:  BTFSS  03.0
0022:  GOTO   02A
0023:  MOVF   46,W
0024:  SUBWF  77,F
0025:  BTFSS  03.0
0026:  DECF   7A,F
0027:  MOVF   47,W
0028:  SUBWF  7A,F
0029:  BSF    03.0
002A:  RLF    78,F
002B:  RLF    79,F
002C:  DECFSZ 48,F
002D:  GOTO   016
002E:  RETURN
002F:  MOVLW  10
0030:  MOVWF  4A
0031:  CLRF   77
0032:  CLRF   7A
0033:  RRF    47,F
0034:  RRF    46,F
0035:  BTFSS  03.0
0036:  GOTO   03D
0037:  MOVF   48,W
0038:  ADDWF  77,F
0039:  BTFSC  03.0
003A:  INCF   7A,F
003B:  MOVF   49,W
003C:  ADDWF  7A,F
003D:  RRF    7A,F
003E:  RRF    77,F
003F:  RRF    79,F
0040:  RRF    78,F
0041:  DECFSZ 4A,F
0042:  GOTO   033
0043:  RETURN
0044:  MOVF   44,W
0045:  CLRF   78
0046:  SUBWF  43,W
0047:  BTFSC  03.0
0048:  GOTO   04C
0049:  MOVF   43,W
004A:  MOVWF  77
004B:  GOTO   058
004C:  CLRF   77
004D:  MOVLW  08
004E:  MOVWF  45
004F:  RLF    43,F
0050:  RLF    77,F
0051:  MOVF   44,W
0052:  SUBWF  77,W
0053:  BTFSC  03.0
0054:  MOVWF  77
0055:  RLF    78,F
0056:  DECFSZ 45,F
0057:  GOTO   04F
0058:  RETURN
*
0184:  MOVF   0B,W
0185:  MOVWF  42
0186:  BCF    0B.7
0187:  BSF    03.5
0188:  BSF    03.6
0189:  BSF    0C.7
018A:  BSF    0C.0
018B:  NOP
018C:  NOP
018D:  BCF    03.5
018E:  BCF    03.6
018F:  BTFSC  42.7
0190:  BSF    0B.7
0191:  BTFSC  03.0
0192:  GOTO   1BC
0193:  BSF    03.6
0194:  MOVF   0C,W
0195:  ANDLW  7F
0196:  BCF    03.6
0197:  MOVWF  42
0198:  BSF    03.6
0199:  MOVF   0D,W
019A:  BCF    03.6
019B:  MOVWF  43
019C:  BSF    03.6
019D:  MOVF   0F,W
019E:  BCF    03.6
019F:  MOVWF  44
01A0:  MOVF   42,W
01A1:  BTFSS  0C.4
01A2:  GOTO   1A1
01A3:  MOVWF  19
01A4:  MOVF   43,W
01A5:  BSF    03.6
01A6:  MOVWF  0D
01A7:  BCF    03.6
01A8:  MOVF   44,W
01A9:  BSF    03.6
01AA:  MOVWF  0F
01AB:  BCF    03.6
01AC:  MOVF   0B,W
01AD:  MOVWF  45
01AE:  BCF    0B.7
01AF:  BSF    03.5
01B0:  BSF    03.6
01B1:  BSF    0C.7
01B2:  BSF    0C.0
01B3:  NOP
01B4:  NOP
01B5:  BCF    03.5
01B6:  BCF    03.6
01B7:  BTFSC  45.7
01B8:  BSF    0B.7
01B9:  DECFSZ 41,F
01BA:  GOTO   1BC
01BB:  GOTO   1DC
01BC:  BSF    03.6
01BD:  RLF    0C,W
01BE:  RLF    0E,W
01BF:  ANDLW  7F
01C0:  BCF    03.6
01C1:  MOVWF  42
01C2:  BSF    03.6
01C3:  MOVF   0D,W
01C4:  BCF    03.6
01C5:  MOVWF  43
01C6:  BSF    03.6
01C7:  MOVF   0F,W
01C8:  BCF    03.6
01C9:  MOVWF  44
01CA:  MOVF   42,W
01CB:  BTFSS  0C.4
01CC:  GOTO   1CB
01CD:  MOVWF  19
01CE:  MOVF   43,W
01CF:  BSF    03.6
01D0:  MOVWF  0D
01D1:  BCF    03.6
01D2:  MOVF   44,W
01D3:  BSF    03.6
01D4:  MOVWF  0F
01D5:  INCF   0D,F
01D6:  BTFSC  03.2
01D7:  INCF   0F,F
01D8:  BCF    03.0
01D9:  BCF    03.6
01DA:  DECFSZ 41,F
01DB:  GOTO   184
01DC:  BCF    0A.3
01DD:  BCF    0A.4
01DE:  GOTO   2A5 (RETURN)
01DF:  MOVF   78,W
01E0:  MOVF   41,W
01E1:  MOVWF  43
01E2:  MOVLW  64
01E3:  MOVWF  44
01E4:  CALL   044
01E5:  MOVF   77,W
01E6:  MOVWF  41
01E7:  MOVF   78,W
01E8:  MOVLW  30
01E9:  BTFSS  03.2
01EA:  GOTO   1F2
01EB:  BTFSS  42.1
01EC:  GOTO   1FA
01ED:  BTFSC  42.3
01EE:  GOTO   1FA
01EF:  BTFSC  42.4
01F0:  MOVLW  20
01F1:  GOTO   1F5
01F2:  BCF    42.3
01F3:  BCF    42.4
01F4:  BSF    42.0
01F5:  ADDWF  78,F
01F6:  MOVF   78,W
01F7:  BTFSS  0C.4
01F8:  GOTO   1F7
01F9:  MOVWF  19
01FA:  MOVF   41,W
01FB:  MOVWF  43
01FC:  MOVLW  0A
01FD:  MOVWF  44
01FE:  CALL   044
01FF:  MOVF   77,W
0200:  MOVWF  41
0201:  MOVF   78,W
0202:  MOVLW  30
0203:  BTFSS  03.2
0204:  GOTO   20B
0205:  BTFSC  42.3
0206:  GOTO   210
0207:  BTFSS  42.0
0208:  GOTO   210
0209:  BTFSC  42.4
020A:  MOVLW  20
020B:  ADDWF  78,F
020C:  MOVF   78,W
020D:  BTFSS  0C.4
020E:  GOTO   20D
020F:  MOVWF  19
0210:  MOVLW  30
0211:  ADDWF  41,F
0212:  MOVF   41,W
0213:  BTFSS  0C.4
0214:  GOTO   213
0215:  MOVWF  19
0216:  BCF    0A.3
0217:  BCF    0A.4
0218:  GOTO   2AA (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #device ADC=10 *=16   
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOMCLR                   //Master Clear pin not enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES BROWNOUT                 //Brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES BORV40                   //Brownout reset at 4.0V 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
0219:  MOVLW  41
021A:  MOVWF  04
021B:  BCF    03.7
021C:  MOVF   00,W
021D:  BTFSC  03.2
021E:  GOTO   22C
021F:  MOVLW  02
0220:  MOVWF  78
0221:  CLRF   77
0222:  DECFSZ 77,F
0223:  GOTO   222
0224:  DECFSZ 78,F
0225:  GOTO   221
0226:  MOVLW  97
0227:  MOVWF  77
0228:  DECFSZ 77,F
0229:  GOTO   228
022A:  DECFSZ 00,F
022B:  GOTO   21F
022C:  BCF    0A.3
022D:  BCF    0A.4
022E:  GOTO   2B5 (RETURN)
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... volatile unsigned int rate[10]; // array to hold last ten IBI values 
.................... volatile unsigned long sampleCounter = 0; // used to determine pulse timing 
.................... volatile unsigned long lastBeatTime = 0; // used to find IBI 
.................... volatile long int P = 512; // used to find peak in pulse wave, seeded 
.................... volatile long int T = 512; // used to find trough in pulse wave, seeded 
.................... volatile long int thresh = 512; // used to find instant moment of heart beat, seeded 
.................... volatile unsigned int amp = 100; // used to hold amplitude of pulse waveform, seeded 
.................... volatile boolean firstBeat; // used to seed rate array so we startup with reasonable BPM 
.................... volatile boolean secondBeat; // used to seed rate array so we startup with reasonable BPM 
....................  
.................... volatile unsigned int BPM; // int that holds raw Analog in 0. updated every 2mS 
.................... volatile unsigned int16 Signal; // holds the incoming raw data 
.................... volatile long int IBI = 600; // int that holds the time interval between beats! Must be seeded! 
.................... volatile boolean Pulse; // "True" when User's live heartbeat is detected. "False" when not a "live beat". 
.................... volatile boolean QS; // becomes true when finds a beat. 
.................... long int N; 
.................... unsigned int runningTotal = 0; 
.................... int i = 0; 
....................  
.................... unsigned int16 adc_value = 0; 
....................  
.................... void calculate_heart_beat(unsigned int16 adc_value){ 
....................  
....................    Signal = adc_value; 
*
0059:  MOVF   42,W
005A:  MOVWF  38
005B:  MOVF   41,W
005C:  MOVWF  37
....................    sampleCounter += 2; 
005D:  MOVLW  02
005E:  ADDWF  2A,F
005F:  BTFSC  03.0
0060:  INCF   2B,F
....................    N = sampleCounter - lastBeatTime; 
0061:  MOVF   2C,W
0062:  SUBWF  2A,W
0063:  MOVWF  3B
0064:  MOVF   2B,W
0065:  MOVWF  3C
0066:  MOVF   2D,W
0067:  BTFSS  03.0
0068:  INCFSZ 2D,W
0069:  SUBWF  3C,F
....................     
....................    //find trough of the pulse wave 
....................    if (Signal < thresh && N > (IBI / 5)*3) { // avoid dichrotic noise by waiting 3/5 of last IBI 
006A:  MOVF   38,W
006B:  SUBWF  33,W
006C:  BTFSS  03.0
006D:  GOTO   0A2
006E:  BTFSS  03.2
006F:  GOTO   074
0070:  MOVF   32,W
0071:  SUBWF  37,W
0072:  BTFSC  03.0
0073:  GOTO   0A2
0074:  MOVF   3A,W
0075:  MOVWF  45
0076:  MOVF   39,W
0077:  MOVWF  44
0078:  CLRF   47
0079:  MOVLW  05
007A:  MOVWF  46
007B:  CALL   00A
007C:  MOVF   79,W
007D:  MOVWF  44
007E:  MOVF   78,W
007F:  MOVWF  43
0080:  MOVF   44,W
0081:  MOVWF  47
0082:  MOVF   43,W
0083:  MOVWF  46
0084:  CLRF   49
0085:  MOVLW  03
0086:  MOVWF  48
0087:  CALL   02F
0088:  MOVF   79,W
0089:  MOVWF  7A
008A:  MOVF   7A,W
008B:  SUBWF  3C,W
008C:  BTFSS  03.0
008D:  GOTO   0A2
008E:  BTFSS  03.2
008F:  GOTO   094
0090:  MOVF   3B,W
0091:  SUBWF  78,W
0092:  BTFSC  03.0
0093:  GOTO   0A2
....................         if (Signal < T) { // T is the trough 
0094:  MOVF   38,W
0095:  SUBWF  31,W
0096:  BTFSS  03.0
0097:  GOTO   0A2
0098:  BTFSS  03.2
0099:  GOTO   09E
009A:  MOVF   30,W
009B:  SUBWF  37,W
009C:  BTFSC  03.0
009D:  GOTO   0A2
....................             T = Signal; // keep track of lowest point in pulse wave 
009E:  MOVF   38,W
009F:  MOVWF  31
00A0:  MOVF   37,W
00A1:  MOVWF  30
....................         } 
....................     } 
....................      
....................     //find peak of the pulse wave 
....................     if (Signal > thresh && Signal > P) { // thresh condition helps avoid noise 
00A2:  MOVF   33,W
00A3:  SUBWF  38,W
00A4:  BTFSS  03.0
00A5:  GOTO   0BA
00A6:  BTFSS  03.2
00A7:  GOTO   0AC
00A8:  MOVF   37,W
00A9:  SUBWF  32,W
00AA:  BTFSC  03.0
00AB:  GOTO   0BA
00AC:  MOVF   2F,W
00AD:  SUBWF  38,W
00AE:  BTFSS  03.0
00AF:  GOTO   0BA
00B0:  BTFSS  03.2
00B1:  GOTO   0B6
00B2:  MOVF   37,W
00B3:  SUBWF  2E,W
00B4:  BTFSC  03.0
00B5:  GOTO   0BA
....................         P = Signal; // P is the peak 
00B6:  MOVF   38,W
00B7:  MOVWF  2F
00B8:  MOVF   37,W
00B9:  MOVWF  2E
....................     } // keep track of highest point in pulse wave 
....................      
....................     if(N > 250){ 
00BA:  MOVF   3C,F
00BB:  BTFSS  03.2
00BC:  GOTO   0C1
00BD:  MOVF   3B,W
00BE:  SUBLW  FA
00BF:  BTFSC  03.0
00C0:  GOTO   149
....................       if ((Signal > thresh) && (Pulse == false) && (N > (IBI / 5)*3)){ 
00C1:  MOVF   33,W
00C2:  SUBWF  38,W
00C3:  BTFSS  03.0
00C4:  GOTO   149
00C5:  BTFSS  03.2
00C6:  GOTO   0CB
00C7:  MOVF   37,W
00C8:  SUBWF  32,W
00C9:  BTFSC  03.0
00CA:  GOTO   149
00CB:  BTFSC  35.2
00CC:  GOTO   149
00CD:  MOVF   3A,W
00CE:  MOVWF  45
00CF:  MOVF   39,W
00D0:  MOVWF  44
00D1:  CLRF   47
00D2:  MOVLW  05
00D3:  MOVWF  46
00D4:  CALL   00A
00D5:  MOVF   79,W
00D6:  MOVWF  45
00D7:  MOVF   78,W
00D8:  MOVWF  44
00D9:  MOVF   45,W
00DA:  MOVWF  47
00DB:  MOVF   44,W
00DC:  MOVWF  46
00DD:  CLRF   49
00DE:  MOVLW  03
00DF:  MOVWF  48
00E0:  CALL   02F
00E1:  MOVF   79,W
00E2:  MOVWF  7A
00E3:  MOVF   7A,W
00E4:  SUBWF  3C,W
00E5:  BTFSS  03.0
00E6:  GOTO   149
00E7:  BTFSS  03.2
00E8:  GOTO   0ED
00E9:  MOVF   3B,W
00EA:  SUBWF  78,W
00EB:  BTFSC  03.0
00EC:  GOTO   149
....................          Pulse = true; // set the Pulse flag when we think there is a pulse 
00ED:  BSF    35.2
....................          IBI = sampleCounter - lastBeatTime; // measure time between beats in mS 
00EE:  MOVF   2C,W
00EF:  SUBWF  2A,W
00F0:  MOVWF  39
00F1:  MOVF   2B,W
00F2:  MOVWF  3A
00F3:  MOVF   2D,W
00F4:  BTFSS  03.0
00F5:  INCFSZ 2D,W
00F6:  SUBWF  3A,F
....................          lastBeatTime = sampleCounter; // keep track of time for next pulse 
00F7:  MOVF   2B,W
00F8:  MOVWF  2D
00F9:  MOVF   2A,W
00FA:  MOVWF  2C
....................           
....................          if (secondBeat) { // if this is the second beat, if secondBeat == TRUE 
00FB:  BTFSS  35.1
00FC:  GOTO   10B
....................               secondBeat = false; // clear secondBeat flag 
00FD:  BCF    35.1
....................                
....................               for (i = 0; i <= 9; i++) { // seed the running total to get a realisitic BPM at startup 
00FE:  CLRF   3E
00FF:  MOVF   3E,W
0100:  SUBLW  09
0101:  BTFSS  03.0
0102:  GOTO   10B
....................                  rate[i] = IBI; 
0103:  MOVLW  20
0104:  ADDWF  3E,W
0105:  MOVWF  04
0106:  BCF    03.7
0107:  MOVF   39,W
0108:  MOVWF  00
0109:  INCF   3E,F
010A:  GOTO   0FF
....................               } 
....................          } 
....................  
....................          if (firstBeat) { // if it's the first time we found a beat, if firstBeat == TRUE 
010B:  BTFSS  35.0
010C:  GOTO   110
....................               firstBeat = false; // clear firstBeat flag 
010D:  BCF    35.0
....................               secondBeat = true; // set the second beat flag 
010E:  BSF    35.1
....................               return; // IBI value is unreliable so discard it 
010F:  GOTO   181
....................          } 
....................           
....................          runningTotal = 0; // clear the runningTotal variable 
0110:  CLRF   3D
....................          i = 0; 
0111:  CLRF   3E
....................          for (i = 0; i <= 8; i++) { // shift data in the rate array 
0112:  CLRF   3E
0113:  MOVF   3E,W
0114:  SUBLW  08
0115:  BTFSS  03.0
0116:  GOTO   133
....................              rate[i] = rate[i + 1]; // and drop the oldest IBI value 
0117:  MOVLW  20
0118:  ADDWF  3E,W
0119:  MOVWF  78
011A:  CLRF   7A
011B:  BTFSC  03.0
011C:  INCF   7A,F
011D:  MOVLW  01
011E:  ADDWF  3E,W
011F:  ADDLW  20
0120:  MOVWF  04
0121:  BCF    03.7
0122:  MOVF   00,W
0123:  MOVWF  45
0124:  MOVF   78,W
0125:  MOVWF  04
0126:  BCF    03.7
0127:  BTFSC  7A.0
0128:  BSF    03.7
0129:  MOVF   45,W
012A:  MOVWF  00
....................              runningTotal += rate[i]; // add up the 9 oldest IBI values 
012B:  MOVLW  20
012C:  ADDWF  3E,W
012D:  MOVWF  04
012E:  BCF    03.7
012F:  MOVF   00,W
0130:  ADDWF  3D,F
0131:  INCF   3E,F
0132:  GOTO   113
....................          } 
....................  
....................          rate[9] = IBI; // add the latest IBI to the rate array 
0133:  MOVF   39,W
0134:  MOVWF  29
....................          runningTotal += rate[9]; // add the latest IBI to runningTotal 
0135:  MOVF   29,W
0136:  ADDWF  3D,F
....................          runningTotal /= 10; // average the last 10 IBI values 
0137:  MOVF   3D,W
0138:  MOVWF  43
0139:  MOVLW  0A
013A:  MOVWF  44
013B:  CALL   044
013C:  MOVF   78,W
013D:  MOVWF  3D
....................          BPM = 60000 / runningTotal; // how many beats can fit into a minute? that's BPM! 
013E:  MOVLW  EA
013F:  MOVWF  45
0140:  MOVLW  60
0141:  MOVWF  44
0142:  CLRF   47
0143:  MOVF   3D,W
0144:  MOVWF  46
0145:  CALL   00A
0146:  MOVF   78,W
0147:  MOVWF  36
....................          QS = true; // set Quantified Self flag 
0148:  BSF    35.3
....................       } 
....................     } 
....................      
....................      
....................     if (Signal < thresh && Pulse == true) { // when the values are going down, the beat is over 
0149:  MOVF   38,W
014A:  SUBWF  33,W
014B:  BTFSS  03.0
014C:  GOTO   169
014D:  BTFSS  03.2
014E:  GOTO   153
014F:  MOVF   32,W
0150:  SUBWF  37,W
0151:  BTFSC  03.0
0152:  GOTO   169
0153:  BTFSS  35.2
0154:  GOTO   169
....................         Pulse = false; // reset the Pulse flag so we can do it again 
0155:  BCF    35.2
....................         amp = P - T; // get amplitude of the pulse wave 
0156:  MOVF   30,W
0157:  SUBWF  2E,W
0158:  MOVWF  34
....................         thresh = amp / 2 + T; // set thresh at 50% of the amplitude 
0159:  BCF    03.0
015A:  RRF    34,W
015B:  ADDWF  30,W
015C:  MOVWF  32
015D:  MOVF   31,W
015E:  MOVWF  33
015F:  BTFSC  03.0
0160:  INCF   33,F
....................         P = thresh; // reset these for next time 
0161:  MOVF   33,W
0162:  MOVWF  2F
0163:  MOVF   32,W
0164:  MOVWF  2E
....................         T = thresh; 
0165:  MOVF   33,W
0166:  MOVWF  31
0167:  MOVF   32,W
0168:  MOVWF  30
....................     } 
....................  
....................     if (N > 2500) { // if 2.5 seconds go by without a beat 
0169:  MOVF   3C,W
016A:  SUBLW  08
016B:  BTFSC  03.0
016C:  GOTO   181
016D:  XORLW  FF
016E:  BTFSS  03.2
016F:  GOTO   174
0170:  MOVF   3B,W
0171:  SUBLW  C4
0172:  BTFSC  03.0
0173:  GOTO   181
....................         thresh = 512; // set thresh default 
0174:  MOVLW  02
0175:  MOVWF  33
0176:  CLRF   32
....................         P = 512; // set P default 
0177:  MOVWF  2F
0178:  CLRF   2E
....................         T = 512; // set T default 
0179:  MOVWF  31
017A:  CLRF   30
....................         lastBeatTime = sampleCounter; // bring the lastBeatTime up to date 
017B:  MOVF   2B,W
017C:  MOVWF  2D
017D:  MOVF   2A,W
017E:  MOVWF  2C
....................         firstBeat = true; // set these to avoid noise 
017F:  BSF    35.0
....................         secondBeat = false; // when we get the heartbeat back 
0180:  BCF    35.1
....................     } 
0181:  BCF    0A.3
0182:  BCF    0A.4
0183:  GOTO   299 (RETURN)
....................      
.................... } 
....................  
.................... void main() 
*
022F:  MOVF   03,W
0230:  ANDLW  1F
0231:  MOVWF  03
0232:  MOVLW  71
0233:  BSF    03.5
0234:  MOVWF  0F
0235:  CLRF   10
0236:  MOVF   0F,W
0237:  BSF    03.6
0238:  BCF    07.3
0239:  MOVLW  0C
023A:  BCF    03.6
023B:  MOVWF  19
023C:  MOVLW  A2
023D:  MOVWF  18
023E:  MOVLW  90
023F:  BCF    03.5
0240:  MOVWF  18
0241:  CLRF   2B
0242:  CLRF   2A
0243:  CLRF   2D
0244:  CLRF   2C
0245:  MOVLW  02
0246:  MOVWF  2F
0247:  CLRF   2E
0248:  MOVLW  02
0249:  MOVWF  31
024A:  CLRF   30
024B:  MOVLW  02
024C:  MOVWF  33
024D:  CLRF   32
024E:  MOVLW  64
024F:  MOVWF  34
0250:  MOVLW  02
0251:  MOVWF  3A
0252:  MOVLW  58
0253:  MOVWF  39
0254:  CLRF   3D
0255:  CLRF   3E
0256:  CLRF   40
0257:  CLRF   3F
0258:  BSF    03.5
0259:  BSF    03.6
025A:  MOVF   09,W
025B:  ANDLW  C0
025C:  MOVWF  09
025D:  BCF    03.6
025E:  BCF    1F.4
025F:  BCF    1F.5
0260:  MOVLW  00
0261:  BSF    03.6
0262:  MOVWF  08
0263:  BCF    03.5
0264:  CLRF   07
0265:  CLRF   08
0266:  CLRF   09
0267:  BCF    03.7
.................... { 
....................    Pulse = FALSE; 
0268:  BCF    03.6
0269:  BCF    35.2
....................    QS = FALSE; 
026A:  BCF    35.3
....................    firstBeat = TRUE; 
026B:  BSF    35.0
....................    secondBeat = FALSE; 
026C:  BCF    35.1
....................    setup_adc_ports(sAN0); // setup PIN A0 as analog input  
026D:  BSF    03.5
026E:  BSF    03.6
026F:  MOVF   09,W
0270:  ANDLW  C0
0271:  MOVWF  09
0272:  BCF    03.6
0273:  BCF    1F.4
0274:  BCF    1F.5
0275:  MOVLW  01
0276:  BSF    03.6
0277:  MOVWF  08
....................    setup_adc( ADC_CLOCK_INTERNAL );  
0278:  BCF    03.5
0279:  BCF    03.6
027A:  BSF    1F.6
027B:  BSF    1F.7
027C:  BSF    03.5
027D:  BSF    1F.7
027E:  BCF    03.5
027F:  BSF    1F.0
....................    set_adc_channel(0); // set the ADC chaneel to read  
0280:  MOVLW  00
0281:  MOVWF  78
0282:  MOVF   1F,W
0283:  ANDLW  C3
0284:  IORWF  78,W
0285:  MOVWF  1F
....................    delay_us(100); 
0286:  MOVLW  42
0287:  MOVWF  77
0288:  DECFSZ 77,F
0289:  GOTO   288
028A:  NOP
....................  
....................    while(1) { 
....................       adc_value = read_adc(); 
028B:  BSF    1F.1
028C:  BTFSC  1F.1
028D:  GOTO   28C
028E:  BSF    03.5
028F:  MOVF   1E,W
0290:  BCF    03.5
0291:  MOVWF  3F
0292:  MOVF   1E,W
0293:  MOVWF  40
....................       calculate_heart_beat(adc_value); 
0294:  MOVF   40,W
0295:  MOVWF  42
0296:  MOVF   3F,W
0297:  MOVWF  41
0298:  GOTO   059
....................       if(QS == true){ 
0299:  BTFSS  35.3
029A:  GOTO   2B2
....................          QS == false; 
....................          printf("BPM - %u\r\n", BPM);  
029B:  MOVLW  04
029C:  BSF    03.6
029D:  MOVWF  0D
029E:  MOVLW  00
029F:  MOVWF  0F
02A0:  BCF    03.0
02A1:  MOVLW  06
02A2:  BCF    03.6
02A3:  MOVWF  41
02A4:  GOTO   184
02A5:  MOVF   36,W
02A6:  MOVWF  41
02A7:  MOVLW  1B
02A8:  MOVWF  42
02A9:  GOTO   1DF
02AA:  MOVLW  0D
02AB:  BTFSS  0C.4
02AC:  GOTO   2AB
02AD:  MOVWF  19
02AE:  MOVLW  0A
02AF:  BTFSS  0C.4
02B0:  GOTO   2AF
02B1:  MOVWF  19
....................       } 
....................       delay_ms(20);    
02B2:  MOVLW  14
02B3:  MOVWF  41
02B4:  GOTO   219
02B5:  GOTO   28B
....................    } 
.................... } 
.................... // Wait for more debug 
02B6:  SLEEP

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
